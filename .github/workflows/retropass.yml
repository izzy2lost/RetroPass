name: RetroPass Build 

# Controls when the workflow will run
on:
  workflow_dispatch:
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    
    env:
      SolutionPath: RetroPass.sln
      Platform: x64
      Configuration: Release
      BuildMode: SideLoadOnly
      AppxBundle: Never      
      ProjectPath: RetroPass\RetroPass.csproj
      ProjectDirectory: .\RetroPass
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: RetroPass
      PackageOutputBaseName: RetroPass

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:            
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
        
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.0.5
        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v2
        
      # Get tag name so a proper package name can be generated
      - name: Get tag
        id: getTag
        # You may pin to the exact commit or the version.
        uses: dawidd6/action-get-tag@v1.1.0
      
      # Create package name
      - name: GetPackageName
        id: getPackageName
        run: |
          $PackageName = "${{ env.PackageOutputBaseName }}" + "_" + "${{ steps.getTag.outputs.tag }}"          
          echo "::set-output name=PackageName::$PackageName"
          Write-Host "Package Name is $PackageName"
               
      # Generate Self-Signed Certificate
      - name: Generate Self-Signed Certificate
        id: cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1)
          $thumbprint = $cert.Thumbprint
          echo "THUMBPRINT=$thumbprint" >> $GITHUB_ENV
        shell: pwsh
      
      # Build app
      - name: App build
        run: |
          msbuild $env:SolutionPath `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="$env:THUMBPRINT" `
            /p:AppxPackageTestDir="${{ env.PackageOutputRootDir }}\${{ steps.getPackageName.outputs.PackageName }}" `
            /restore

      # Clean the package
      - name: Clean package
        run: | 
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ steps.getPackageName.outputs.PackageName }}"
          Remove-Item -Recurse -path $PackagePath/Add-AppDevPackage.resources
          Remove-Item -Recurse -path $PackagePath/TelemetryDependencies
          Remove-Item -Recurse -path $PackagePath/Dependencies/arm
          Remove-Item -Recurse -path $PackagePath/Dependencies/arm64
          Remove-Item -Recurse -path $PackagePath/Dependencies/x86
          Remove-Item -path $PackagePath/Add-AppDevPackage.ps1
          Remove-Item -Recurse -path $PackagePath/Install.ps1
          
      # Archive the package
      - name: Create archive
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ steps.getPackageName.outputs.PackageName }}"
          Compress-Archive -Path $PackagePath\* -DestinationPath "$PackagePath.zip"
          dir "${{ env.PackageOutputRootDir }}"
       
      # Upload the artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: RetroPass Build
          path: ${{ env.PackageOutputRootDir }}\${{ steps.getPackageName.outputs.PackageName }}.zip